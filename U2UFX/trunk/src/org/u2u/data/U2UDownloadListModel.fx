/*
 * U2UDownloadListModel.fx
 *
 * Created on 19-may-2009, 17:23:59
 */

package org.u2u.data;

import org.u2u.data.U2UAbstractNode;
import java.util.LinkedList;
import org.u2u.filesharing.U2UContentAdvertisementImpl;
import org.u2u.data.U2UDownloadNode;
import net.jxta.share.ContentId;
import javax.swing.JOptionPane;
import org.u2u.filesharing.U2UFileSharingServiceEvent;
import org.u2u.filesharing.U2UFileSharingServiceListener;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.Map;
import org.u2u.filesharing.U2UContentIdImpl;

/**
 * @author sergio
 */

public class U2UDownloadListModel extends U2UAbstractListModel, U2UFileSharingServiceListener {

    //instance variables
    var list:LinkedList = LinkedList{};

    //instance methods
    override function getSize():Integer {
        return list.size();
    }

    /**
    * Gets a node of the list model through index of the node in the list
    */
    override function getNodeAt(index:Integer): U2UAbstractNode {
        return list.get(index) as U2UAbstractNode;
    }

    /**
    * Inserts a adv that represents a file into the list
    * @return true, if the file can be stored, false in other case
    */
    override function insertFileIntoModel(adv: U2UContentAdvertisementImpl):Boolean{
        
        if(this.existNode(adv)){
            //The file exists in the list model
            JOptionPane.showConfirmDialog(null, "This File is already downloading");
            return false;
        }else{
            
            var node:U2UDownloadNode = U2UDownloadNode{
                name: adv.getName();
                length:adv.getLength();
                description:adv.getDescription();
                chunksize:adv.getChunksize();
                cid: adv.getContentId();
                type:adv.getType();
                adv: adv;
            }
            
            list.add(node);
         }

         return true;
    }

    /**
    * Verifies if the advertisement that represents the file is in the list of nodes\
    *@return false if the adv isn't in the list
    */
    function existNode(adv:U2UContentAdvertisementImpl):Boolean{

        for (file in list){
            var cidFile:ContentId = (file as U2UDownloadNode).cid;
            if(cidFile.equals(adv.getContentId())){
                return true;
            }
        }
        return false;
    }

    /**
    *Delete the node selected of the list
    */
    override function deleteFileOfModel(selIndex:Integer):Void{

        if(selIndex<=list.size() and selIndex>=0)
        {
            println("Delete file {selIndex} name : {((list.get(selIndex)) as U2UDownloadNode).name}");
            list.remove(selIndex);
        }
    }

      override function serviceEvent(event:U2UFileSharingServiceEvent):Void {

        //if the event is generated by a progress query for downloads
        if((event.getType()==U2UFileSharingServiceEvent.PROGRESS))
        {
            var obj:Object[] = event.getInformation();

            //get hash of couples key-value that contains the progress for each download
            var val:HashMap = obj[0] as HashMap;

            var pos:Integer =-1;
            var set:Set = val.entrySet();
            var iter:Iterator = set.iterator();
            var entry:Map.Entry;

            while(iter.hasNext())
            {
                entry = iter.next() as Map.Entry;
                var valCid:String = entry.getKey() as String;
                var id:U2UContentIdImpl = new U2UContentIdImpl(valCid);

                pos=  existAdvertisementDownloading(id);

                if(pos != -1)
                {
                    var value:Float = (entry.getValue() as Float);
                    println("---------------------------------------------");
                    println("Modifies the level of the progress to file {(list.get(pos) as U2UDownloadNode).name}");
                    println("New value: {value}");
                    println("---------------------------------------------");
                   
                    var node:U2UDownloadNode = list.get(pos) as U2UDownloadNode;
                    //node.level = entry.getValue() as Integer;
                    node.updateLevel(value*2);
                }

            }

        }
      
      }
      /**
      * Returns the index of the downloading file in other case returns -1
      */
      function existAdvertisementDownloading(id:U2UContentIdImpl):Integer{

            for (x in [0..< (sizeof list)])
            {

                var cid:U2UContentIdImpl = ((list.get(x) as U2UDownloadNode).cid as U2UContentIdImpl);

                if(id.equals(cid)){

                    return x;
                }
            }

            return -1;

      }

}
